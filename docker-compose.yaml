version: '3.3'
networks:
  mesh:
    driver: bridge
    ipam:
      config:
        - subnet: 10.1.0.0/16
          gateway: 10.1.0.1

services:
  minio:
    container_name: minio
    hostname: minio-e2e
    image: quay.io/minio/minio
    restart: always
    networks:
      mesh:
        ipv4_address: 10.1.0.2
    command:
      - server
      - /data
      - "--console-address"
      - ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9001" ]
      interval: 30s
      timeout: 10s
      retries: 5
  prepare_buckets:
    container_name: minio-setup
    image: quay.io/minio/minio
    networks:
      mesh:
        ipv4_address: 10.1.0.3
    depends_on:
      minio:
        condition: service_healthy
    entrypoint:
      - "/bin/sh"
      - "-c"
      - |
        mc alias set e2e "http://10.1.0.2:9000" minioadmin minioadmin
        mc admin info e2e
        mc mb e2e/tmp && mc mb e2e/lakehouse

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    restart: always
    networks:
      mesh:
        ipv4_address: 10.1.0.6
    command:
      - "azurite-blob"
      - "--blobHost"
      - "10.1.0.6"
      - "--blobPort"
      - "10001"
      - "--skipApiVersionCheck"
    ports:
      - "10001:10001"
  create-cdm-container:
    image: python:3.11-slim-bookworm
    depends_on:
      - azurite
    networks:
      mesh:
        ipv4_address: 10.1.0.7
    volumes:
      - ./populate-cdm-container.py:/populate-cdm-container.py
    command: [ "/bin/sh", "-c", "pip install azure-storage-blob requests && python /populate-cdm-container.py" ]
  trino:
    depends_on:
      lakekeeper:
        condition: service_healthy
    networks:
      mesh:
        ipv4_address: 10.1.0.9
    ports:
      - "8080:8080"
    image: "trinodb/trino:455"
    volumes:
      - ./integration-tests.properties:/etc/trino/catalog/iceberg.properties
  http-proxy:
    networks:
      mesh:
        ipv4_address: 10.1.0.10
    ports:
      - "9004:9004"
      - "9005:9005"
      - "443:443"
    image: "envoyproxy/envoy:v1.31.2"
    command:
      - envoy
      - "-c"
      - /etc/envoy/envoy.yaml
    volumes:
      - ./http-proxy-envoy-config.yaml:/etc/envoy/envoy.yaml
  lakekeeper:
    image: quay.io/lakekeeper/catalog:latest-main
    environment:
#      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@10.1.0.15:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@10.1.0.15:5432/postgres
      - RUST_LOG=trace,axum=trace,sqlx=trace,iceberg-catalog=trace
    command: [ "serve" ]
    healthcheck:
      test: [ "CMD", "/home/nonroot/iceberg-catalog", "healthcheck" ]
      interval: 1s
      timeout: 10s
      retries: 30
    depends_on:
      lakekeeper_migrate:
        condition: service_completed_successfully
      lakekeeper_db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      mesh:
        ipv4_address: 10.1.0.11
    ports:
      - "8181:8181"
  lakekeeper_migrate:
    image: quay.io/lakekeeper/catalog:latest-main
    environment:
#      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@10.1.0.15:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@10.1.0.15:5432/postgres
      - RUST_LOG=info
    restart: "no"
    command: [ "migrate" ]
    depends_on:
      lakekeeper_db:
        condition: service_healthy
    networks:
      mesh:
        ipv4_address: 10.1.0.12
  lakekeeper_bootstrap:
    image: curlimages/curl
    depends_on:
      lakekeeper:
        condition: service_healthy
    restart: "no"
    command:
      - -w
      - "%{http_code}"
      - "-X"
      - "POST"
      - "-v"
      - "http://10.1.0.11:8181/management/v1/bootstrap"
      - "-H"
      - "Content-Type: application/json"
      - "--data"
      - '{"accept-terms-of-use": true}'
#      - "-o"
#      - "/dev/null"
      # - "--fail-with-body"
    networks:
      mesh:
        ipv4_address: 10.1.0.13
  lakekeeper_initial_warehouse:
    image: curlimages/curl
    depends_on:
      lakekeeper:
        condition: service_healthy
      lakekeeper_bootstrap:
        condition: service_completed_successfully
    restart: "no"
    command:
      - -w
      - "%{http_code}"
      - "-X"
      - "POST"
      - "-v"
      - "http://10.1.0.11:8181/management/v1/warehouse"
      - "-H"
      - "Content-Type: application/json"
      - "--data"
      - "@create-default-warehouse.json"
      - "-o"
      - "/dev/null"
      # - "--fail-with-body"
    volumes:
      - ./create-default-warehouse.json:/home/curl_user/create-default-warehouse.json
    networks:
      mesh:
        ipv4_address: 10.1.0.14
  lakekeeper_db:
    image: bitnami/postgresql:16.3.0
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -p 5432 -d postgres" ]
      interval: 2s
      timeout: 10s
      retries: 2
    networks:
      mesh:
        ipv4_address: 10.1.0.15

